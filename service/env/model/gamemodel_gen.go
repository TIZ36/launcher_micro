// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	gameFieldNames          = builder.RawFieldNames(&Game{})
	gameRows                = strings.Join(gameFieldNames, ",")
	gameRowsExpectAutoSet   = strings.Join(stringx.Remove(gameFieldNames, "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	gameRowsWithPlaceHolder = strings.Join(stringx.Remove(gameFieldNames, "`game_id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"

	cacheGameGameIdPrefix = "cache:game:gameId:"
)

type (
	gameModel interface {
		Insert(ctx context.Context, data *Game) (sql.Result, error)
		FindOne(ctx context.Context, gameId int64) (*Game, error)
		Update(ctx context.Context, data *Game) error
		Delete(ctx context.Context, gameId int64) error
	}

	defaultGameModel struct {
		sqlc.CachedConn
		table string
	}

	Game struct {
		GameId         int64     `db:"game_id"`          // 游戏ID
		GameName       string    `db:"game_name"`        // 游戏全称
		GameNameAbbrev string    `db:"game_name_abbrev"` // 游戏缩写
		CreateTime     time.Time `db:"create_time"`      // 创建时间
		UpdateTime     time.Time `db:"update_time"`      // 更新时间
	}
)

func newGameModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultGameModel {
	return &defaultGameModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`game`",
	}
}

func (m *defaultGameModel) Delete(ctx context.Context, gameId int64) error {
	gameGameIdKey := fmt.Sprintf("%s%v", cacheGameGameIdPrefix, gameId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `game_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, gameId)
	}, gameGameIdKey)
	return err
}

func (m *defaultGameModel) FindOne(ctx context.Context, gameId int64) (*Game, error) {
	gameGameIdKey := fmt.Sprintf("%s%v", cacheGameGameIdPrefix, gameId)
	var resp Game
	err := m.QueryRowCtx(ctx, &resp, gameGameIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `game_id` = ? limit 1", gameRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, gameId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGameModel) Insert(ctx context.Context, data *Game) (sql.Result, error) {
	gameGameIdKey := fmt.Sprintf("%s%v", cacheGameGameIdPrefix, data.GameId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, gameRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GameId, data.GameName, data.GameNameAbbrev)
	}, gameGameIdKey)
	return ret, err
}

func (m *defaultGameModel) Update(ctx context.Context, data *Game) error {
	gameGameIdKey := fmt.Sprintf("%s%v", cacheGameGameIdPrefix, data.GameId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `game_id` = ?", m.table, gameRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.GameName, data.GameNameAbbrev, data.GameId)
	}, gameGameIdKey)
	return err
}

func (m *defaultGameModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGameGameIdPrefix, primary)
}

func (m *defaultGameModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `game_id` = ? limit 1", gameRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGameModel) tableName() string {
	return m.table
}
