// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	launcherConfigFieldNames          = builder.RawFieldNames(&LauncherConfig{})
	launcherConfigRows                = strings.Join(launcherConfigFieldNames, ",")
	launcherConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(launcherConfigFieldNames, "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	launcherConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(launcherConfigFieldNames, "`park_env_id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"

	cacheLauncherConfigParkEnvIdPrefix = "cache:launcherConfig:parkEnvId:"
)

type (
	launcherConfigModel interface {
		Insert(ctx context.Context, data *LauncherConfig) (sql.Result, error)
		FindOne(ctx context.Context, parkEnvId string) (*LauncherConfig, error)
		Update(ctx context.Context, data *LauncherConfig) error
		Delete(ctx context.Context, parkEnvId string) error
	}

	defaultLauncherConfigModel struct {
		sqlc.CachedConn
		table string
	}

	LauncherConfig struct {
		ParkEnvId  string    `db:"park_env_id"`
		ConfUrl    string    `db:"conf_url"`
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newLauncherConfigModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultLauncherConfigModel {
	return &defaultLauncherConfigModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`launcher_config`",
	}
}

func (m *defaultLauncherConfigModel) Delete(ctx context.Context, parkEnvId string) error {
	launcherConfigParkEnvIdKey := fmt.Sprintf("%s%v", cacheLauncherConfigParkEnvIdPrefix, parkEnvId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `park_env_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, parkEnvId)
	}, launcherConfigParkEnvIdKey)
	return err
}

func (m *defaultLauncherConfigModel) FindOne(ctx context.Context, parkEnvId string) (*LauncherConfig, error) {
	launcherConfigParkEnvIdKey := fmt.Sprintf("%s%v", cacheLauncherConfigParkEnvIdPrefix, parkEnvId)
	var resp LauncherConfig
	err := m.QueryRowCtx(ctx, &resp, launcherConfigParkEnvIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `park_env_id` = ? limit 1", launcherConfigRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, parkEnvId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLauncherConfigModel) Insert(ctx context.Context, data *LauncherConfig) (sql.Result, error) {
	launcherConfigParkEnvIdKey := fmt.Sprintf("%s%v", cacheLauncherConfigParkEnvIdPrefix, data.ParkEnvId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, launcherConfigRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ParkEnvId, data.ConfUrl)
	}, launcherConfigParkEnvIdKey)
	return ret, err
}

func (m *defaultLauncherConfigModel) Update(ctx context.Context, data *LauncherConfig) error {
	launcherConfigParkEnvIdKey := fmt.Sprintf("%s%v", cacheLauncherConfigParkEnvIdPrefix, data.ParkEnvId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `park_env_id` = ?", m.table, launcherConfigRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ConfUrl, data.ParkEnvId)
	}, launcherConfigParkEnvIdKey)
	return err
}

func (m *defaultLauncherConfigModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheLauncherConfigParkEnvIdPrefix, primary)
}

func (m *defaultLauncherConfigModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `park_env_id` = ? limit 1", launcherConfigRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLauncherConfigModel) tableName() string {
	return m.table
}
