// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	parkEnvFieldNames          = builder.RawFieldNames(&ParkEnv{})
	parkEnvRows                = strings.Join(parkEnvFieldNames, ",")
	parkEnvRowsExpectAutoSet   = strings.Join(stringx.Remove(parkEnvFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), ",")
	parkEnvRowsWithPlaceHolder = strings.Join(stringx.Remove(parkEnvFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), "=?,") + "=?"

	cacheParkEnvIdPrefix        = "cache:parkEnv:id:"
	cacheParkEnvParkEnvIdPrefix = "cache:parkEnv:parkEnvId:"
)

type (
	parkEnvModel interface {
		Insert(ctx context.Context, data *ParkEnv) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ParkEnv, error)
		FindOneByParkEnvId(ctx context.Context, parkEnvId string) (*ParkEnv, error)
		Update(ctx context.Context, data *ParkEnv) error
		Delete(ctx context.Context, id int64) error
	}

	defaultParkEnvModel struct {
		sqlc.CachedConn
		table string
	}

	ParkEnv struct {
		Id             int64     `db:"id"`
		ParkEnvId      string    `db:"park_env_id"`     // 环境唯一标识park_env_id
		GameId         int64     `db:"game_id"`         // 游戏ID
		Name           string    `db:"name"`            // 环境名称
		UpdateStrategy int64     `db:"update_strategy"` // 环境对应的更新策略号
		CreateTime     time.Time `db:"create_time"`     // 创建时间
		UpdateTime     time.Time `db:"update_time"`     // 更新时间
	}
)

func newParkEnvModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultParkEnvModel {
	return &defaultParkEnvModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`park_env`",
	}
}

func (m *defaultParkEnvModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	parkEnvIdKey := fmt.Sprintf("%s%v", cacheParkEnvIdPrefix, id)
	parkEnvParkEnvIdKey := fmt.Sprintf("%s%v", cacheParkEnvParkEnvIdPrefix, data.ParkEnvId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, parkEnvIdKey, parkEnvParkEnvIdKey)
	return err
}

func (m *defaultParkEnvModel) FindOne(ctx context.Context, id int64) (*ParkEnv, error) {
	parkEnvIdKey := fmt.Sprintf("%s%v", cacheParkEnvIdPrefix, id)
	var resp ParkEnv
	err := m.QueryRowCtx(ctx, &resp, parkEnvIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", parkEnvRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultParkEnvModel) FindOneByParkEnvId(ctx context.Context, parkEnvId string) (*ParkEnv, error) {
	parkEnvParkEnvIdKey := fmt.Sprintf("%s%v", cacheParkEnvParkEnvIdPrefix, parkEnvId)
	var resp ParkEnv
	err := m.QueryRowIndexCtx(ctx, &resp, parkEnvParkEnvIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `park_env_id` = ? limit 1", parkEnvRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, parkEnvId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultParkEnvModel) Insert(ctx context.Context, data *ParkEnv) (sql.Result, error) {
	parkEnvIdKey := fmt.Sprintf("%s%v", cacheParkEnvIdPrefix, data.Id)
	parkEnvParkEnvIdKey := fmt.Sprintf("%s%v", cacheParkEnvParkEnvIdPrefix, data.ParkEnvId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, parkEnvRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ParkEnvId, data.GameId, data.Name, data.UpdateStrategy)
	}, parkEnvIdKey, parkEnvParkEnvIdKey)
	return ret, err
}

func (m *defaultParkEnvModel) Update(ctx context.Context, newData *ParkEnv) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	parkEnvIdKey := fmt.Sprintf("%s%v", cacheParkEnvIdPrefix, data.Id)
	parkEnvParkEnvIdKey := fmt.Sprintf("%s%v", cacheParkEnvParkEnvIdPrefix, data.ParkEnvId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, parkEnvRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ParkEnvId, newData.GameId, newData.Name, newData.UpdateStrategy, newData.Id)
	}, parkEnvIdKey, parkEnvParkEnvIdKey)
	return err
}

func (m *defaultParkEnvModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheParkEnvIdPrefix, primary)
}

func (m *defaultParkEnvModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", parkEnvRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultParkEnvModel) tableName() string {
	return m.table
}
